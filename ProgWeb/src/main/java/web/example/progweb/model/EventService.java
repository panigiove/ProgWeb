package web.example.progweb.model;


import web.example.progweb.model.abstractClass.AbstractModel;
import web.example.progweb.model.entity.Event;

import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/*
CREATE TABLE EVENTI (
    id_evento INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_categoria INT,
    id_localita INT,
    nome VARCHAR(255) NOT NULL,
    inizio TIMESTAMP NOT NULL,
    fine TIMESTAMP NOT NULL,
    totale_poltrona INT NOT NULL,
    disponibilita_poltrona INT NOT NULL,
    totale_in_piedi INT NOT NULL,
    disponibilita_in_piedi INT NOT NULL,
    prezzi_poltrona DECIMAL(10, 2) NOT NULL,
    prezzi_in_piedi DECIMAL(10, 2) NOT NULL,
    n_click INT DEFAULT 0,
    FOREIGN KEY (id_localita) REFERENCES LOCALITA(id_localita),
    FOREIGN KEY (id_categoria) REFERENCES CATEGORIA(id_categoria)
);
 */

public class EventService extends AbstractModel {
    private final PreparedStatement getEventByCategoryPreparedStatement;
    private final PreparedStatement getEventByIdPreparedStatement;
    private final PreparedStatement insertEventPreparedStatement;
    private final PreparedStatement deleteEventPreparedStatement;
    private final PreparedStatement incrementClickPreparedStatement;
    private final PreparedStatement decrementPoltronePreparedStatement;
    private final PreparedStatement decrementInPiediPreparedStatement;
    private final PreparedStatement checkAvailabilityPreparedStatement;

    public EventService() throws SQLException, ClassNotFoundException {
        super();
        getEventByCategoryPreparedStatement = connection.prepareStatement("SELECT * FROM EVENTI WHERE id_categoria = ?");
        getEventByIdPreparedStatement = connection.prepareStatement("SELECT * FROM EVENTI WHERE id_evento = ?");
        insertEventPreparedStatement = connection.prepareStatement("INSERT INTO EVENTI (id_categoria, id_localita, nome, inizio, fine, totale_poltrona, disponibilita_poltrona, totale_in_piedi, disponibilita_in_piedi, prezzi_poltrona, prezzi_in_piedi) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        deleteEventPreparedStatement = connection.prepareStatement("DELETE FROM EVENTI WHERE id_evento = ?");
        checkAvailabilityPreparedStatement = connection.prepareStatement("SELECT disponibilita_in_piedi FROM EVENTI WHERE id_evento = ?");
        incrementClickPreparedStatement = connection.prepareStatement("UPDATE EVENTI SET n_click = n_click + 1 WHERE id_evento = ?");
        decrementPoltronePreparedStatement = connection.prepareStatement("UPDATE EVENTI SET disponibilita_poltrona = disponibilita_poltrona - ? WHERE id_evento = ?");
        decrementInPiediPreparedStatement = connection.prepareStatement("UPDATE EVENTI SET disponibilita_in_piedi = disponibilita_in_piedi - ? WHERE id_evento = ?");
    }

    public void insertEvent(int idCategoria, int idLocalita, String name, String start, String end, int totalSeats, int availableSeats, int totalStanding, int availableStanding, String seatPrice, String standingPrice) throws SQLException {
        insertEventPreparedStatement.setInt(1, idCategoria);
        insertEventPreparedStatement.setInt(2, idLocalita);
        insertEventPreparedStatement.setString(3, name);
        insertEventPreparedStatement.setString(4, formatDateTime(start));
        insertEventPreparedStatement.setString(5, formatDateTime(end));
        insertEventPreparedStatement.setInt(6, totalSeats);
        insertEventPreparedStatement.setInt(7, availableSeats);
        insertEventPreparedStatement.setInt(8, totalStanding);
        insertEventPreparedStatement.setInt(9, availableStanding);
        insertEventPreparedStatement.setString(10, seatPrice);
        insertEventPreparedStatement.setString(11, standingPrice);
        insertEventPreparedStatement.executeUpdate();
    }

    public void deleteEvent(int id) throws SQLException {
        deleteEventPreparedStatement.setInt(1, id);
        deleteEventPreparedStatement.executeUpdate();
    }

    public void incrementClick(int id) throws SQLException {
        incrementClickPreparedStatement.setInt(1, id);
        incrementClickPreparedStatement.executeUpdate();
    }

    /*
    typology: false -> poltrona, true -> in piedi
     */
    public boolean decrementAvailability(int id, boolean type, int n) throws SQLException {
        if (checkAvailability(id, type, n)) {
            if (type) {
                decrementInPiediPreparedStatement.setInt(1, n);
                decrementInPiediPreparedStatement.setInt(2, id);
                decrementInPiediPreparedStatement.executeUpdate();
            } else {
                decrementPoltronePreparedStatement.setInt(1, n);
                decrementPoltronePreparedStatement.setInt(2, id);
                decrementPoltronePreparedStatement.executeUpdate();
            }
            return true;
        }
        return false;
    }

    private boolean checkAvailability(int id, boolean type, int n) throws SQLException {
        checkAvailabilityPreparedStatement.setInt(1, id);
        ResultSet resultSet = checkAvailabilityPreparedStatement.executeQuery();
        if (resultSet.next()) {
            return resultSet.getInt(1) >= n;
        }
        return false;
    }

    public List<Event> getEventByCategory(int idCategoria) throws SQLException {
        getEventByCategoryPreparedStatement.setInt(1, idCategoria);
        ResultSet resultSet = getEventByCategoryPreparedStatement.executeQuery();
        List<Event> events = new ArrayList<>();
        while (resultSet.next()) {
            Event event = new Event(
                    resultSet.getInt("id_evento"),
                    resultSet.getInt("id_categoria"),
                    resultSet.getInt("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getInt("totale_poltrona"),
                    resultSet.getInt("disponibilita_poltrona"),
                    resultSet.getInt("totale_in_piedi"),
                    resultSet.getInt("disponibilita_in_piedi"),
                    convertToBigDecimal(resultSet.getString("prezzi_poltrona")),
                    convertToBigDecimal(resultSet.getString("prezzi_in_piedi")),
                    resultSet.getInt("n_click")
            );
            events.add(event);
        }
        return events;
    }

    public Event getEventById (int id) throws SQLException {
        getEventByIdPreparedStatement.setInt(1, id);
        ResultSet resultSet = getEventByIdPreparedStatement.executeQuery();
        if (resultSet.next()) {
            return new Event(
                    resultSet.getInt("id_evento"),
                    resultSet.getInt("id_categoria"),
                    resultSet.getInt("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getInt("totale_poltrona"),
                    resultSet.getInt("disponibilita_poltrona"),
                    resultSet.getInt("totale_in_piedi"),
                    resultSet.getInt("disponibilita_in_piedi"),
                    convertToBigDecimal(resultSet.getString("prezzi_poltrona")),
                    convertToBigDecimal(resultSet.getString("prezzi_in_piedi")),
                    resultSet.getInt("n_click")
            );
        }
        return null;
    }

    public List<Event> get3MostClickedEvent() throws SQLException{
        String query = "SELECT * FROM EVENTI ORDER BY n_click DESC FETCH FIRST 3 ROWS ONLY";
        ResultSet resultSet = unsafeExecuteQuery(query);
        List<Event> events = new ArrayList<>();
        while (resultSet.next()) {
            Event event = new Event(
                    resultSet.getInt("id_evento"),
                    resultSet.getInt("id_categoria"),
                    resultSet.getInt("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getInt("totale_poltrona"),
                    resultSet.getInt("disponibilita_poltrona"),
                    resultSet.getInt("totale_in_piedi"),
                    resultSet.getInt("disponibilita_in_piedi"),
                    convertToBigDecimal(resultSet.getString("prezzi_poltrona")),
                    convertToBigDecimal(resultSet.getString("prezzi_in_piedi")),
                    resultSet.getInt("n_click")
            );
            events.add(event);
        }
        return events;
    }

    public List<Event> getEventsOrderedByClick() throws SQLException {
        String query = "SELECT * FROM EVENTI ORDER BY n_click DESC";
        ResultSet resultSet = unsafeExecuteQuery(query);
        List<Event> events = new ArrayList<>();
        while (resultSet.next()) {
            Event event = new Event(
                    resultSet.getInt("id_evento"),
                    resultSet.getInt("id_categoria"),
                    resultSet.getInt("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getInt("totale_poltrona"),
                    resultSet.getInt("disponibilita_poltrona"),
                    resultSet.getInt("totale_in_piedi"),
                    resultSet.getInt("disponibilita_in_piedi"),
                    convertToBigDecimal(resultSet.getString("prezzi_poltrona")),
                    convertToBigDecimal(resultSet.getString("prezzi_in_piedi")),
                    resultSet.getInt("n_click")
            );
            events.add(event);
        }
        return events;
    }

    private BigDecimal convertToBigDecimal(String value) {
        try {
            return new BigDecimal(value);
        } catch (NumberFormatException e) {
            // Handle the case where the string is not a valid decimal
            // For example, log the error or return a default value
            System.err.println("Invalid decimal format: " + value);
            return BigDecimal.ZERO; // or another default value
        }
    }

}
