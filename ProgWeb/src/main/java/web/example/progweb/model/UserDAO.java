package web.example.progweb.model;

import web.example.progweb.model.abstractClass.AbstractDAO;
import web.example.progweb.model.entity.User;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

/*
CREATE TABLE UTENTI (
    id_utente INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    cognome VARCHAR(255) NOT NULL,
    data_nascita DATE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    telefono CHAR(10) NOT NULL,
    n_acquisti INT DEFAULT 0,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
*/

public class UserDAO extends AbstractDAO {

    public UserDAO() throws SQLException, ClassNotFoundException {
        super();
    }

    public boolean checkUser(String username, String password) throws SQLException {
        String query = "SELECT * FROM UTENTI WHERE username = ? AND password = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, username);
        preparedStatement.setString(2, password);
        ResultSet resultSet = preparedStatement.executeQuery();
        return resultSet.next();
    }

    public boolean checkUsername (String username) throws SQLException {
        String query = "SELECT * FROM UTENTI WHERE username = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, username);
        ResultSet resultSet = preparedStatement.executeQuery();
        return resultSet.next();
    }

    public void insertUser(String username, String password, String name, String surname, String birthDate, String email, String phone) throws SQLException {
        String query = "INSERT INTO UTENTI (nome, cognome, data_nascita, email, telefono, username, password) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, name);
        preparedStatement.setString(2, surname);
        preparedStatement.setString(3, formatDate(birthDate));
        preparedStatement.setString(4, email);
        preparedStatement.setString(5, phone);
        preparedStatement.setString(6, username);
        preparedStatement.setString(7, password);
        preparedStatement.executeUpdate();
    }

    public void deleteUser(String username) throws SQLException {
        String query = "DELETE FROM UTENTI WHERE username = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, username);
        preparedStatement.executeUpdate();
    }

    public User getUser(String id) throws SQLException {
        String query = "SELECT * FROM UTENTI WHERE id_utente = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, id);
        ResultSet resultSet = preparedStatement.executeQuery();
        resultSet.next();
        return new User(resultSet.getString("id_utente"), resultSet.getString("nome"), resultSet.getString("cognome"), resultSet.getString("data_nascita"), resultSet.getString("email"), resultSet.getString("telefono"), resultSet.getInt("n_acquisti"));
    }

    public String getUserId(String username) throws SQLException {
        String query = "SELECT id_utente FROM UTENTI WHERE username = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, username);
        ResultSet resultSet = preparedStatement.executeQuery();
        resultSet.next();
        return resultSet.getString("id_utente");
    }

    public List<User> getUsers() throws SQLException {
        String query = "SELECT * FROM UTENTI";
        ResultSet resultSet = unsafeExecuteQuery(query);
        List<User> users = new ArrayList<>();
        while (resultSet.next()) {
            User user = new User(
                    resultSet.getString("id_utente"),
                    resultSet.getString("nome"),
                    resultSet.getString("cognome"),
                    resultSet.getString("data_nascita"),
                    resultSet.getString("email"),
                    resultSet.getString("telefono"),
                    resultSet.getInt("n_acquisti")
            );
            users.add(user);
        }
        return users;
    }

    public List<User> getUsersOrderedByPurchase () throws SQLException {
        String query = "SELECT id_utente, nome, cognome, data_nascita, email, telefono, n_acquisti FROM UTENTI ORDER BY n_acquisti DESC";
        ResultSet resultSet = statement.executeQuery(query);
        List<User> users = new ArrayList<>();
        while (resultSet.next()) {
            User user = new User(
                    resultSet.getString("id_utente"),
                    resultSet.getString("nome"),
                    resultSet.getString("cognome"),
                    resultSet.getString("data_nascita"),
                    resultSet.getString("email"),
                    resultSet.getString("telefono"),
                    resultSet.getInt("n_acquisti")
            );
            users.add(user);
        }
        return users;
    }

    public void incrementPurchases(String id) throws SQLException {
        String query = "UPDATE UTENTI SET n_acquisti = n_acquisti + 1 WHERE id_utente = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, id);
        preparedStatement.executeUpdate();
    }
}
