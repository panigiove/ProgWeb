package web.example.progweb.model;


import web.example.progweb.model.abstractClass.AbstractDAO;
import web.example.progweb.model.entity.Event;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/*
CREATE TABLE EVENTI (
    id_evento INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_categoria INT,
    id_localita INT,
    nome VARCHAR(255) NOT NULL,
    inizio TIMESTAMP NOT NULL,
    fine TIMESTAMP NOT NULL,
    totale_poltrona INT NOT NULL,
    disponibilita_poltrona INT NOT NULL,
    totale_in_piedi INT NOT NULL,
    disponibilita_in_piedi INT NOT NULL,
    prezzi_poltrona DECIMAL(10, 2) NOT NULL,
    prezzi_in_piedi DECIMAL(10, 2) NOT NULL,
    n_click INT DEFAULT 0,
    FOREIGN KEY (id_localita) REFERENCES LOCALITA(id_localita),
    FOREIGN KEY (id_categoria) REFERENCES CATEGORIA(id_categoria)
);
 */

public class EventDAO extends AbstractDAO {
    public EventDAO() throws SQLException, ClassNotFoundException {
        super();
    }
    public EventDAO (Connection connection) throws SQLException {
        super(connection);
    }
    public List<Event> getEventByCategory(String idCategoria) throws SQLException {
        String query = "SELECT * FROM EVENTI WHERE id_categoria = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, idCategoria);
        ResultSet resultSet = preparedStatement.executeQuery();
        List<Event> events = new ArrayList<>();
        while (resultSet.next()) {
            Event event = new Event(
                    resultSet.getString("id_evento"),
                    resultSet.getString("id_categoria"),
                    resultSet.getString("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getString("totale_poltrona"),
                    resultSet.getString("disponibilita_poltrona"),
                    resultSet.getString("totale_in_piedi"),
                    resultSet.getString("disponibilita_in_piedi"),
                    resultSet.getString("prezzi_poltrona"),
                    resultSet.getString("prezzi_in_piedi"),
                    resultSet.getInt("n_click")
            );
            events.add(event);
        }
        return events;
    }

    public Event getEventById (String id) throws SQLException {
        String query = "SELECT * FROM EVENTI WHERE id_evento = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, id);
        ResultSet resultSet = preparedStatement.executeQuery();
        if (resultSet.next()) {
            return new Event(
                    resultSet.getString("id_evento"),
                    resultSet.getString("id_categoria"),
                    resultSet.getString("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getString("totale_poltrona"),
                    resultSet.getString("disponibilita_poltrona"),
                    resultSet.getString("totale_in_piedi"),
                    resultSet.getString("disponibilita_in_piedi"),
                    resultSet.getString("prezzi_poltrona"),
                    resultSet.getString("prezzi_in_piedi"),
                    resultSet.getInt("n_click")
            );
        }
        return null;
    }

    public List<Event> get3MostClickedEvent() throws SQLException{
        String query = "SELECT * FROM EVENTI ORDER BY n_click DESC FETCH FIRST 3 ROWS ONLY";
        ResultSet resultSet = statement.executeQuery(query);
        List<Event> events = new ArrayList<>();
        while (resultSet.next()) {
            Event event = new Event(
                    resultSet.getString("id_evento"),
                    resultSet.getString("id_categoria"),
                    resultSet.getString("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getString("totale_poltrona"),
                    resultSet.getString("disponibilita_poltrona"),
                    resultSet.getString("totale_in_piedi"),
                    resultSet.getString("disponibilita_in_piedi"),
                    resultSet.getString("prezzi_poltrona"),
                    resultSet.getString("prezzi_in_piedi"),
                    resultSet.getInt("n_click")
            );
            events.add(event);
        }
        return events;
    }

    public List<Event> getEventsOrderedByClick() throws SQLException {
        String query = "SELECT * FROM EVENTI ORDER BY n_click DESC";
        ResultSet resultSet = statement.executeQuery(query);
        List<Event> events = new ArrayList<>();
        while (resultSet.next()) {
            Event event = new Event(
                    resultSet.getString("id_evento"),
                    resultSet.getString("id_categoria"),
                    resultSet.getString("id_localita"),
                    resultSet.getString("nome"),
                    resultSet.getString("inizio"),
                    resultSet.getString("fine"),
                    resultSet.getString("totale_poltrona"),
                    resultSet.getString("disponibilita_poltrona"),
                    resultSet.getString("totale_in_piedi"),
                    resultSet.getString("disponibilita_in_piedi"),
                    resultSet.getString("prezzi_poltrona"),
                    resultSet.getString("prezzi_in_piedi"),
                    resultSet.getInt("n_click")
            );
            events.add(event);
        }
        return events;
    }

    public void deleteEvent(String id) throws SQLException {
        String query = "DELETE FROM EVENTI WHERE id_evento = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, id);
        preparedStatement.executeUpdate();
    }

    public void insertEvent(String idCategoria, String idLocalita, String name, String start, String end, String totalSeats, String availableSeats, String totalStanding, String availableStanding, String seatPrice, String standingPrice) throws SQLException {
        String query = "INSERT INTO EVENTI (id_categoria, id_localita, nome, inizio, fine, totale_poltrona, disponibilita_poltrona, totale_in_piedi, disponibilita_in_piedi, prezzi_poltrona, prezzi_in_piedi) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, idCategoria);
        preparedStatement.setString(2, idLocalita);
        preparedStatement.setString(3, name);
        preparedStatement.setString(4, formatDateTime(start));
        preparedStatement.setString(5, formatDateTime(end));
        preparedStatement.setString(6, totalSeats);
        preparedStatement.setString(7, availableSeats);
        preparedStatement.setString(8, totalStanding);
        preparedStatement.setString(9, availableStanding);
        preparedStatement.setString(10, seatPrice);
        preparedStatement.setString(11, standingPrice);
        preparedStatement.executeUpdate();
    }

    public void incrementClick(String id) throws SQLException {
        String query = "UPDATE EVENTI SET n_click = n_click + 1 WHERE id_evento = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, id);
        preparedStatement.executeUpdate();
    }


}
