package web.example.progweb.model;

import web.example.progweb.model.abstractClass.AbstractModel;
import web.example.progweb.model.entity.*;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/*
CREATE TABLE PRENOTAZIONE_BIGLIETTI (
    id_prenotazione INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_evento INT NOT NULL,
    id_utente INT NOT NULL,
    id_sconto INT,
    quantita_poltrona INT DEFAULT 0,
    quantita_in_piedi INT DEFAULT 0,
    data_acquisto TIMESTAMP NOT NULL,
    prezzo DECIMAL (10, 2) NOT NULL,
    FOREIGN KEY (id_evento) REFERENCES EVENTI(id_evento) ON DELETE CASCADE,
    FOREIGN KEY (id_utente) REFERENCES UTENTI(id_utente),
    FOREIGN KEY (id_sconto) REFERENCES SCONTI_EVENTO(id_sconto) ON DELETE CASCADE
);
 */

public class TicketModel extends AbstractModel {
    private PreparedStatement createTicketPreparedStatement;
    private PreparedStatement getTicketPreparedStatement;
    private PreparedStatement getAllUserTicketPreparedStatement;
    private PreparedStatement deleteTicketPreparedStatement;

    private EventModel eventModel;
    private UserModel userModel;
    private DiscountModel discountModel;

    public TicketModel() throws SQLException, ClassNotFoundException {
        super();
        eventModel = new EventModel();
        userModel = new UserModel();
        discountModel = new DiscountModel();
        prepareStatements();
    }

    public TicketModel(Connection connection) throws SQLException{
        super(connection);
        eventModel = new EventModel(connection);
        userModel = new UserModel(connection);
        discountModel = new DiscountModel(connection);
        prepareStatements();
    }

    private void prepareStatements() throws SQLException {
        createTicketPreparedStatement = connection.prepareStatement("INSERT INTO PRENOTAZIONE_BIGLIETTI (id_evento, id_utente, id_sconto, quantita_poltrona, quantita_in_piedi, data_acquisto, prezzo) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?)", PreparedStatement.RETURN_GENERATED_KEYS);
        getTicketPreparedStatement = connection.prepareStatement("SELECT * FROM PRENOTAZIONE_BIGLIETTI WHERE id_prenotazione = ?");
        getAllUserTicketPreparedStatement = connection.prepareStatement("SELECT * FROM PRENOTAZIONE_BIGLIETTI WHERE id_utente = ?");
         deleteTicketPreparedStatement = connection.prepareStatement("DELETE FROM PRENOTAZIONE_BIGLIETTI WHERE id_prenotazione = ?");
    }

    public Ticket buyTicket(int id_event, int id_user, int id_discount, int n_seats, int n_stands) throws SQLException {
        if (userModel.checkId(id_user) && eventModel.checkId(id_event) &&
                (id_discount == 0 || discountModel.checkId(id_discount)) &&
                eventModel.checkAvailability(id_event, n_seats, n_stands)) {

            createTicketPreparedStatement.setInt(1, id_event);
            createTicketPreparedStatement.setInt(2, id_user);
            createTicketPreparedStatement.setInt(3, id_discount);
            createTicketPreparedStatement.setInt(4, n_seats);
            createTicketPreparedStatement.setInt(5, n_stands);

            BigDecimal price = calculatePrice(id_event, id_user, id_discount, n_seats, n_stands);
            createTicketPreparedStatement.setBigDecimal(6, price);

            int affectedRows = createTicketPreparedStatement.executeUpdate();
            if (affectedRows == 0) {
                userModel.incrementPurchases(id_user);
                try (ResultSet generatedKeys = createTicketPreparedStatement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return getTicket(generatedKeys.getInt(1));
                    }
                }
            }
        }
        return null;
    }

    public BigDecimal calculatePrice(int id_event, int id_user, int id_discount, int n_seats, int n_stands) throws SQLException {
        BigDecimal price = new BigDecimal(0);
        if ((userModel.getPurchases(id_user) + 1) % 5 != 0) {
            Event event = eventModel.getEventById(id_event);

            BigDecimal discount = new BigDecimal(0);
            if (id_discount > 0) {
                // Get the discount value from the discount model and convert it to a fraction
                discount = discountModel.getDiscountById(id_discount).getDiscount().divide(new BigDecimal(100));
            }

            BigDecimal seatPrice = event.getSeatPrice().multiply(new BigDecimal(n_seats));
            BigDecimal standPrice = event.getStandingPrice().multiply(new BigDecimal(n_stands));
            price = seatPrice.add(standPrice);
            price = price.subtract(price.multiply(discount));
        }
        return price;
    }

    public List<Ticket> getAllUserTicket (int idUser) throws SQLException {
        getAllUserTicketPreparedStatement.setInt(1, idUser);
        ResultSet rs = getAllUserTicketPreparedStatement.executeQuery();
        List<Ticket> tickets = new ArrayList<>();
        while (rs.next()){
            int idPrenotazione = rs.getInt("id_prenotazione");
            int idEvento = rs.getInt("id_evento");
            int idUtente = rs.getInt("id_utente");

            // Gestire id_sconto che potrebbe essere NULL
            int idSconto = rs.wasNull() ? -1 : rs.getInt("id_sconto");

            int quantita_poltrona = rs.getInt("quantita_poltrona");
            int quantita_in_piedi = rs.getInt("quantita_in_piedi");
            String dataAcquisto = rs.getString("data_acquisto");
            BigDecimal prezzo = rs.getBigDecimal("prezzo");

            tickets.add(new Ticket(idPrenotazione, idEvento, idUtente, idSconto, quantita_poltrona, quantita_in_piedi, dataAcquisto, prezzo));
        }
        return tickets;
    }

    public Ticket getTicket(int id) throws SQLException {
        getTicketPreparedStatement.setInt(1, id);
        ResultSet rs = getTicketPreparedStatement.executeQuery();
        if (rs.next()){
            int idPrenotazione = rs.getInt("id_prenotazione");
            int idEvento = rs.getInt("id_evento");
            int idUtente = rs.getInt("id_utente");

            // Gestire id_sconto che potrebbe essere NULL
            int idSconto = rs.wasNull() ? -1 : rs.getInt("id_sconto");

            int quantita_poltrona = rs.getInt("quantita_poltrona");
            int quantita_in_piedi = rs.getInt("quantita_in_piedi");
            String dataAcquisto = rs.getString("data_acquisto");
            BigDecimal prezzo = rs.getBigDecimal("prezzo");
            return new Ticket(idPrenotazione, idEvento, idUtente, idSconto, quantita_poltrona, quantita_in_piedi, dataAcquisto, prezzo);
        }
        return null;
    }

    public void deleteTicket(int id) throws SQLException {
        Ticket ticket = getTicket(id);
        if (ticket != null) {
            if (deleteTicketPreparedStatement.executeUpdate() > 0) {
                eventModel.incrementAvailability(ticket.idEvento(), ticket.quantita_poltrona(), ticket.quantita_in_piedi());
            }
        }
    }
}

