package web.example.progweb.model;

import web.example.progweb.model.abstractClass.AbstractModel;
import web.example.progweb.model.entity.Ticket;

import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/*
CREATE TABLE PRENOTAZIONE_BIGLIETTI (
    id_prenotazione INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_evento INT NOT NULL,
    id_utente INT NOT NULL,
    id_sconto INT,
    tipologia VARCHAR(10) CHECK (tipologia IN ('poltrona', 'in_piedi')) NOT NULL,
    data_acquisto TIMESTAMP NOT NULL,
    FOREIGN KEY (id_evento) REFERENCES EVENTI(id_evento),
    FOREIGN KEY (id_utente) REFERENCES UTENTI(id_utente),
    FOREIGN KEY (id_sconto) REFERENCES SCONTI_EVENTO(id_sconto)
);
 */

public class TicketModel extends AbstractModel {
    private final PreparedStatement createTicketPreparedStatement;
    private EventModel eventModel;

    public TicketModel() throws SQLException, ClassNotFoundException {
        super();
        eventModel = new EventModel();
        createTicketPreparedStatement = connection.prepareStatement("INSERT INTO PRENOTAZIONE_BIGLIETTI (id_evento, id_utente, id_sconto, tipologia, data_acquisto) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)");
    }

    /*
    typology: false -> poltrona, true -> in piedi
     */
    public boolean buyTicket(int nTicket, int id_event, int id_user, int id_discount, boolean typology) throws SQLException {
        if (eventModel.decrementAvailability(id_event, typology, nTicket)){
            createTicketPreparedStatement.setInt(1, id_event);
            createTicketPreparedStatement.setInt(2, id_user);
            createTicketPreparedStatement.setInt(3, id_discount);
            createTicketPreparedStatement.setString(4, typology ? "in_piedi" : "poltrona");
            createTicketPreparedStatement.executeUpdate();
            return true;
        }
        return false;
    }

    private BigDecimal calcolatePrice(int id_event, boolean typology, int nTicket) throws SQLException {
        String query = "SELECT prezzo FROM EVENTI WHERE id_evento = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setInt(1, id_event);
        ResultSet resultSet = preparedStatement.executeQuery();
        resultSet.next();
        BigDecimal price = resultSet.getBigDecimal("prezzo");
        if (typology) {
            price = price.multiply(new BigDecimal("0.8"));
        }
        return price.multiply(new BigDecimal(nTicket));
    }

    public List<Ticket> getTickets() throws SQLException {
        List<Ticket> tickets = new ArrayList<>();
        String query = "SELECT * FROM PRENOTAZIONE_BIGLIETTI";
        ResultSet resultSet = unsafeExecuteQuery(query);
        while (resultSet.next()) {
            Ticket ticket = new Ticket(
                    resultSet.getInt("id_prenotazione"),
                    resultSet.getInt("id_evento"),
                    resultSet.getInt("id_utente"),
                    resultSet.getInt("id_sconto"),
                    resultSet.getString("tipologia"),
                    resultSet.getString("data_acquisto")
            );
            tickets.add(ticket);
        }
        return tickets;
    }
}
